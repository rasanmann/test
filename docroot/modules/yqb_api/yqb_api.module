<?php

/**
 * @file
 * Contains yqb_api.module.
 */

use Drupal\Core\Routing\RouteMatchInterface;
use Drupal\user\Entity\User;

/**
 * Implements hook_help().
 */
function yqb_api_help($route_name, RouteMatchInterface $route_match) {
  switch ($route_name) {
    // Main module help for the yqb_api module.
    case 'help.page.yqb_api':
      $output = '';
      $output .= '<h3>' . t('About') . '</h3>';
      $output .= '<p>' . t('YQB API') . '</p>';
      return $output;

    default:
  }
  
  return '';
}


/**
 * Implements hook_cron().
 *
 * We implement hook_cron() to do "background" processing. It gets called every
 * time the Drupal cron runs. We then decide what has to happen in response.
 */
function yqb_api_cron() {
  // We access our configuration.
  $cron_config = \Drupal::configFactory()->getEditable('yqb_api.cron');

  // Default to an hourly interval.
  $interval = $cron_config->get('interval');
  $interval = !empty($interval) ? $interval : 60;

  // We usually don't want to act every time cron runs (which could be every
  // minute) so keep a time for the next run in a variable.
  $next_execution = $cron_config->get('next_execution');
  $next_execution = !empty($next_execution) ? $next_execution : 0;

  if (REQUEST_TIME >= $next_execution) {
    /**
     * Clean up users beacons visited if time is more than 6 hours after last update
     */
    
    $query = \Drupal::entityQuery('user')
      ->condition('field_beacons_visited', '', '!=')
      ->exists('field_beacons_visited')
      ->condition('field_beacons_updated', strtotime('-12 hours'), '<=');
    
    $results = $query->execute();
    
    // Log
    $msg = sprintf('Found %d users to clean their beacons history', sizeof($results));
    \Drupal::logger('yqb_api')->notice($msg);
    echo $msg . PHP_EOL;
    
    if(!empty($results)){
      foreach($results as $result){
        $user = User::load($result);
        
        $user->set('field_beacons_visited', '');
        $user->set('field_beacons_updated', '');
        $user->save();
      }
    }
    
    // Prepare next execution
    $cron_config->set('next_execution', REQUEST_TIME + $interval)->save();
  }
}