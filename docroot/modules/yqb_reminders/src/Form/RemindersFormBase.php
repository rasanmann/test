<?php
/**
 * @file
 * Contains \Drupal\yqb_parking_booker\Form\ParkingBookerForm.
 */

namespace Drupal\yqb_reminders\Form;

use Drupal\Core\Form\FormBase;
use Drupal\Core\Form\FormStateInterface;
use Drupal\Core\Render\Element\Url;
use Drupal\Core\Session\AccountInterface;
use Drupal\Core\Session\SessionManagerInterface;
use Drupal\user\PrivateTempStoreFactory;
use Symfony\Component\DependencyInjection\ContainerInterface;
use Drupal\advam\Connector\AdvamConnector;
use NumberFormatter;

class RemindersFormBase extends FormBase {

    /**
     * @var \Drupal\user\PrivateTempStoreFactory
     */
    protected $tempStoreFactory;

    /**
     * @var \Drupal\Core\Session\SessionManagerInterface
     */
    private $sessionManager;

    /**
     * @var \Drupal\Core\Session\AccountInterface
     */
    private $currentUser;

    /**
     * @var \Drupal\user\PrivateTempStore
     */
    protected $store;

    /**
     * Constructs a \Drupal\demo\Form\ParkingBookerForm
     *
     * @param \Drupal\user\PrivateTempStoreFactory $temp_store_factory
     * @param \Drupal\Core\Session\SessionManagerInterface $session_manager
     * @param \Drupal\Core\Session\AccountInterface $current_user
     */
    public function __construct(AccountInterface $current_user) {
//        $this->tempStoreFactory = $temp_store_factory;
//        $this->sessionManager = $session_manager;
        $this->currentUser = $current_user;
//
//        $this->store = $this->tempStoreFactory->get('multistep_data');
    }

    /**
     * {@inheritdoc}
     */
    public static function create(ContainerInterface $container) {
        return new static(
//            $container->get('user.private_tempstore'),
//            $container->get('session_manager'),
            $container->get('current_user')
        );
    }

    public function getFormId() {
        // TODO: Implement getFormId() method.
    }

    /**
     * {@inheritdoc}.
     */
    public function buildForm(array $form, FormStateInterface $form_state) {
        // Start a manual session for anonymous users.
//        if ($this->currentUser && $this->currentUser->isAnonymous() && !isset($_SESSION['multistep_form_holds_session'])) {
//            $_SESSION['multistep_form_holds_session'] = TRUE;
//            $this->sessionManager->start();
//        }

        $form = [];

        $form['#cache']['max_age'] = 0;

        return $form;
    }

    public function validateForm(array &$form, FormStateInterface $form_state) {
        parent::validateForm($form, $form_state); // TODO: Change the autogenerated stub
    }

    public function submitForm(array &$form, FormStateInterface $form_state) {
        // TODO: Implement submitForm() method.
    }

    /**
     * Saves the data from the multistep form.
     */
    protected function saveData() {
        // Logic for saving data goes here...
//        $this->deleteStore();
        drupal_set_message($this->t('The form has been saved.'));

    }

    /**
     * Helper method that removes all the keys from the store collection used for
     * the multistep form.
     */
    protected function deleteStore() {
//        $keys = [
//            'phone_number',
//            'flight_number',
//            'flight_airline',
//            'flight_type',
//            'flight_date',
//        ];
//
//        foreach ($keys as $key) {
//            $this->store->delete($key);
//        }
    }
}