/*-------------------------------------------------------------------
	Media queries
-------------------------------------------------------------------*/


@mixin responsive($max, $min:0){
	@if $min != 0{
		@media only screen and (min-width : $min+1) and (max-width : $max) {
			@content;
		}
	}
	@else{
		@media only screen and (max-width : $max) {
			@content;
		}
	}
}

@mixin responsiveMin($min){
	@media only screen and (min-width : $min+1) {
		@content;
	}
}

@mixin font-resize($all-sizes) {
	@each $size in $all-sizes{
		 @include responsive(nth($size, 1)){
			@include font-size(nth($size, 2));
			 @if nth($size, 3) {
				 line-height:nth($size, 3);
			 }
		 }
	}
}

@mixin retina {
	@media
	only screen and (-webkit-min-device-pixel-ratio: 1.25),
	only screen and ( min--moz-device-pixel-ratio: 1.25),
	only screen and ( min-device-pixel-ratio: 1.25),
	only screen and ( min-resolution: 200dpi),
	only screen and ( min-resolution: 1.25dppx) {
		@content;
	}
}

@mixin degradation($version) {
	@at-root (without: media) {
		html.#{$version} &{
			@content;
		}
	}
}

/*-------------------------------------------------------------------
	Utilities
-------------------------------------------------------------------*/
@mixin clearfix() {
	&:after { content: ""; display: block; clear: both; } & { zoom: 1; }
}

@mixin debug($list) {
    body:before {
        content: debug($list, true)              !important;

        display: block                            !important;
        margin: 1em                               !important;
        padding: .5em                             !important; 

        background: #EFEFEF                       !important;
        border: 1px solid #DDD                    !important;
        border-radius: .2em                       !important;

        color: #333                               !important;
        font: .75em/1.5 "Courier New", monospace  !important;
        text-shadow: 0 1px white                  !important;
        white-space: pre-wrap                     !important;
    }
}

@mixin overflowing($direction, $ratio:66.66%){
	@if $direction == 'left'{
		width:calc(100% + #{$push_width}); 
		@include translate($push_width * -1, 0);
	}@else{
		width:calc(100% + #{$push_width}); 
		@include translate(0, 0);
	}
	
	@include responsive($outer_layout_width){
		width:calc(100% + ((100vw - 940px) / 2));
		
		@if $direction == 'left'{
			@include translate(calc(((100vw - 940px) / 2) * -1), 0);
		}@else{
			
			@include translate(0, 0);
		}
	}
	
	@include responsive($layout_width){
		width:100%;
		@include translate(0, 0);
	}
	
	@at-root html.ie9 &{
		@include responsive($outer_layout_width) {
			width:100%;
			@include translate(0, 0);
		}
	}
}

@mixin box-offset($ratio:50%, $align:left, $height:100%){
	@if $align == 'left'{
		left:auto;
		right:100% - $ratio;
	}
	@else{
		left:100% - $ratio;
		right:auto;
	}
	
	height:$height;
	top:0;
	position:absolute;
	width:calc(50vw - #{((0.5 - ($ratio/100%)) * $layout_width)});  
	
	@content;
}

@mixin filler {
	&:before, .before {
		content:'';
		display:block;
		position:absolute;
		z-index:0;
		@content;
	}
	@include responsive($mq-breakpoint){
		&:before, .before {
			display:none;
		}
	}
}

@mixin pulse($small-diameter, $large-diameter, $color, $opacity: 0.4, $duration:1.8, $shadow: false) {
	$big-circle: $large-diameter;
	$small-circle: $small-diameter;
	$scale-ratio: ($small-circle / $big-circle);
	$shadow-whith: ($big-circle - $small-circle);
	$shadow-blur: ($shadow-whith / 2);
	$shadow-length: ($shadow-blur / 2);
	height: #{$big-circle}px;
	width: #{$big-circle}px;
	display: block;
	position: relative;
	&:before {
		position: absolute;
		z-index: 1;
		content: '';
		display: block;
		border-radius: 50%;
		background-color: rgba($color, $opacity);
		width: 100%;
		height: 100%;
		@include scale($scale-ratio);
		@include animation(pulse, #{$duration}s infinite ease-out);
	}
	&:after {
		z-index: 2;
		position: absolute;
		content: '';
		display: block;
		border-radius: 50%;
		background-color: $color;
		width: #{$small-circle}px;
		height: #{$small-circle}px;
		top: 50%;
		left: 50%;
		@include translate(-50%, -50%);
		@if $shadow != false{
			@include box-shadow(0px #{$shadow-length}px #{$shadow-blur}px 0px rgba(0, 0, 0, 0.3));
		}
	}
}

@mixin font-face($family, $file, $weight : normal, $style : normal) {
	font-family: $family;
    src: url(#{$file}.eot);
    src: url(#{$file}.eot?#iefix) format('embedded-opentype'),
         url(#{$file}.woff) format('woff'),
         url(#{$file}.ttf) format('truetype'),
         url(#{$file}.svg##{$family}) format('svg');
    font-weight: $weight;
    font-style: $style;
}

@mixin font-size($fs) {
  @if unitless($fs) and $fs != 0 {
    $fsrem: $fs / 10;
    font-size: #{$fs}px;
    font-size: #{$fsrem}rem;
  }
  @else {
    font-size: $fs;
  }
}

@mixin font-smoothing($value: on) {
    @if $value == on {
        -webkit-font-smoothing: antialiased;
        -moz-osx-font-smoothing: grayscale;
    }
    @else {
        -webkit-font-smoothing: subpixel-antialiased;
        -moz-osx-font-smoothing: auto;
    }
}

@mixin rgba($color, $opacity) {
	background-color:$color;
	background-color:rgba($color, $opacity);
}

@mixin sprite($x:0, $y:0, $size:200px) {
	background-image:url(../img/sprite.png#{$cache-buster});
	background-repeat:no-repeat;
	background-position:$x $y;
	
	@include retina{
		background-image:url(../img/sprite@2x.png#{$cache-buster});
		background-repeat:no-repeat;
		background-position:$x/2 $y/2;
		background-size:$size;
	}
}

@mixin filter($filters){
	-webkit-filter: drop-shadow( $filters );
			filter: drop-shadow( $filters ); /* Same syntax as box-shadow */
}

@mixin vertical-align($position:absolute) {
	position:$position;
	top:50%;
	@include transform(translateY(-50%));
}

@mixin absolute-center($position:absolute) {
	left:50%;
	position:$position;
	top:50%;
	@include transform(translate(-50%, -50%));
}

/*-------------------------------------------------------------------
	Browser prefixes
-------------------------------------------------------------------*/
@mixin backface-visibility($visibility){
	-webkit-backface-visibility:$visibility;
	-moz-backface-visibility:$visibility;
	-ms-backface-visibility:$visibility;
	backface-visibility:$visibility;
}

@mixin border-radius($radius : 3px) {
	-webkit-border-radius: $radius; /* Saf3-4, iOS 1-3.2, Android =1.6 */
	-moz-border-radius: $radius; /* FF1-3.6 */
	border-radius: $radius; /* Opera 10.5, IE9, Saf5, Chrome, FF4, iOS 4, Android 2.1+ */
	
	/* useful if you don't want a bg color from leaking outside the border: */
	-moz-background-clip: padding; -webkit-background-clip: padding-box; background-clip: padding-box;
}

@mixin border-radius-all($tl:3px, $tr:3px, $br:3px, $bl:3px) {
	-webkit-border-radius: $tl $tr $br $bl; /* Saf3-4, iOS 1-3.2, Android =1.6 */
	-moz-border-radius: $tl $tr $br $bl; /* FF1-3.6 */
	border-radius: $tl $tr $br $bl; /* Opera 10.5, IE9, Saf5, Chrome, FF4, iOS 4, Android 2.1+ */
	
	/* useful if you don't want a bg color from leaking outside the border: */
	-moz-background-clip: padding; 
	-webkit-background-clip: padding-box; 
	background-clip: padding-box;
}


@mixin box-shadow($shadow1, $shadow2:false, $shadow3:false, $shadow4:false, $shadow5:false) {
$params: $shadow1;
 @if $shadow2 != false
   { $params: $shadow1, $shadow2; }
   @if $shadow3 != false
     { $params: $shadow1, $shadow2, $shadow3; }
     @if $shadow4 != false
       { $params: $shadow1, $shadow2, $shadow3, $shadow4; }
       @if $shadow5 != false
         { $params: $shadow1, $shadow2, $shadow3, $shadow4, $shadow5; }

 -webkit-box-shadow: $params;
 -moz-box-shadow: $params;
 box-shadow: $params;

}

@mixin columns($count:2, $gap:20px) {
	-webkit-column-count:$count;
	-moz-column-count:$count;
	column-count:$count;
	-webkit-column-gap:$gap;
	-moz-column-gap:$gap;
	column-gap:$gap;
}

@mixin gradient($from : #FFF, $to : #000) {
	background-color: $from;
	background-image: -webkit-gradient(linear, 0% 0%, 0% 100%, from($from), to($to)); /* Safari 4+, Chrome 1+ */
	background-image: -webkit-linear-gradient($from, $to); /* Safari 5.1+, Chrome 10+ */
	background-image: -moz-linear-gradient($from, $to); /* Firefox 3.6+ */
	background-image: -ms-linear-gradient(top, $from, $to); /* IE10 */
	background-image: linear-gradient(to bottom, $from, $to);
	filter: progid:DXImageTransform.Microsoft.gradient( startColorstr='#{$from}', endColorstr='#{$to}',GradientType=0 ); /* IE6-9 fallback on horizontal gradient */ 
/*	@include degradation(ie9){
		filter: none;
	}*/
}

@mixin radial-gradient($from : #FFF, $to : #000, $opacity : 1, $start : 0%, $end : 100%){
	background: -moz-radial-gradient(center, ellipse cover, $to $start, $from $end); /* FF3.6+ */
	background: -webkit-gradient(radial, center center, 0px, center center, 100%, color-stop($start,$to), color-stop($end,$from)); /* Chrome,Safari4+ */
	background: -webkit-radial-gradient(center, ellipse cover, $to $start,$from $end); /* Chrome10+,Safari5.1+ */
	background: -ms-radial-gradient(center, ellipse cover, $to $start,$from $end); /* IE10+ */
	background: radial-gradient(ellipse at center, $to $start,$from $end); /* W3C */
}

@mixin diagonal-gradient($from : #FFF, $to : #000, $opacity : 1) {
	@include background-color($from, $opacity); /* Old browsers */
	background: -moz-linear-gradient(-45deg, rgba($from, $opacity)  0%, rgba($to, $opacity) 100%); /* FF3.6+ */
	background: -webkit-gradient(linear, left top, right bottom, color-stop(0%,rgba($from, $opacity) ), color-stop(100%,rgba($to, $opacity))); /* Chrome,Safari4+ */
	background: -webkit-linear-gradient(-45deg, rgba($from, $opacity)  0%,rgba($to, $opacity) 100%); /* Chrome10+,Safari5.1+ */
	background: -ms-linear-gradient(-45deg, rgba($from, $opacity)  0%,rgba($to, $opacity) 100%); /* IE10+ */
	background: linear-gradient(135deg, rgba($from, $opacity)  0%,rgba($to, $opacity) 100%); /* W3C */
	filter: progid:DXImageTransform.Microsoft.gradient( startColorstr='#{$from}', endColorstr='#{$to}',GradientType=1 ); /* IE6-9 fallback on horizontal gradient */ 
}

@mixin inner-shadow($hor, $ver, $blur : 5px, $color : #000) {
	-webkit-box-shadow:inset $hor $ver $blur $color; /* Saf3-4, iOS 4.0.2 - 4.2, Android 2.3+ */
	-moz-box-shadow:inset $hor $ver $blur $color; /* FF3.5 - 3.6 */
	box-shadow:inset $hor $ver $blur $color; /* Opera 10.5, IE9, FF4+, Chrome 6+, iOS 5 */
}


@mixin placeholder($color: $input-color-placeholder) {
  // Firefox
  &::-moz-placeholder {
    color: $color;
    opacity: 1; // Override Firefox's unusual default opacity; see https://github.com/twbs/bootstrap/pull/11526
  }
  &:-ms-input-placeholder { color: $color; } // Internet Explorer 10+
  &::-webkit-input-placeholder  { color: $color; } // Safari and Chrome
}

@mixin perspective($amount:300px){
	-webkit-perspective:$amount;  // Chrome 12+, Safari 4+ 
	-moz-perspective:$amount;  // Firefox 10+ 
	-ms-perspective:$amount;  // IE 10 
	perspective:$amount;
}

@mixin text-shadow($hor, $ver, $blur : 5px, $color : #000) {
	text-shadow: $hor $ver $blur $color; /* FF3.5+, Opera 9+, Saf1+, Chrome, IE10 */
}

/*-------------------------------------------------------------------
	Transform
-------------------------------------------------------------------*/

$transform : (-webkit-transform, -moz-transform, -ms-transform, transform);

@mixin scale($value : 2) {
	-webkit-transform: scale($value);  /* Saf3.1+, Chrome */
	-moz-transform: scale($value); /* FF3.5+ */
	-ms-transform: scale($value); /* IE9 */
	transform: scale($value);
}

@mixin translate($x: 10px, $y: 10px) {
	-webkit-transform: translate($x,$y);  /* Saf3.1+, Chrome */
	-moz-transform: translate($x,$y); /* FF3.5+ */
	-ms-transform: translate($x,$y); /* IE9 */
	transform: translate($x,$y);
	zoom: 1;
}

@mixin transform-style($style){
	-webkit-transform-style: preserve-3d;
	-moz-transform-style: preserve-3d;
	-ms-transform-style: preserve-3d;
	transform-style: preserve-3d;
}

@mixin transform($style){
	-webkit-transform: $style;  /* Saf3.1+, Chrome */
	-moz-transform: $style; /* FF3.5+ */
	-ms-transform: $style; /* IE9 */
	transform: $style;
}



@mixin rotate($angle: 30, $x : 0px, $y : 0px) {
	-webkit-transform: rotate(#{$angle}deg);  /* Saf3.1+, Chrome */
	-moz-transform: rotate(#{$angle}deg);  /* FF3.5+ */
	-ms-transform: rotate(#{$angle}deg);  /* IE9 */
	transform: rotate(#{$angle}deg);
	@include transform-origin($x, $y);
	/* IE6-IE9
		Can't implement rotate for IE, no COS functions available in SASS
		Example : 7.5deg
		filter: progid:DXImageTransform.Microsoft.Matrix(
		M11=0.9914448613738104, M12=-0.13052619222005157,M21=0.13052619222005157, M22=0.9914448613738104, sizingMethod='auto expand');
	*/
	zoom: 1;
}


/*-------------------------------------------------------------------
	Transition
-------------------------------------------------------------------*/

@mixin transition_transform($property : opacity, $duration : 0.5, $delay : 0, $ease : cubic-bezier(0.190, 1.000, 0.220, 1.000)) {
	-moz-transition-duration : #{$duration}s; /* FireFox */
	-webkit-transition-duration : #{$duration}s; /* Safari / Chrome */
	transition-duration : #{$duration}s; /* W3C */

	-webkit-transition-property :  (-webkit-transform, $property); /* Safari / Chrome */
	-moz-transition-property : (-moz-transform, $property); /* FireFox */
	transition-property : (transform, $property); /* W3C */
	
	-moz-transition-delay : #{$delay}s; /* FireFox */
	-webkit-transition-delay : #{$delay}s; /* Safari / Chrome */
	transition-delay : #{$delay}s; /* W3C */
	
	/* linear|ease|ease-in|ease-out|ease-in-out|cubic-bezier(n,n,n,n); */
	-webkit-transition-timing-function: $ease;
	-moz-transition-timing-function: $ease;
}

@mixin transition($property : opacity, $duration : 0.15, $ease : ease-in-out) {
	@include transition-property($property);
	@include transition-duration($duration);
	@include transition-timing-function($ease);
	// Webkit animation flicker fix;
	-webkit-backface-visibility: hidden;
}

@mixin transition-duration($duration : 0.5) {
	-moz-transition-duration : #{$duration}s; /* FireFox */
	-webkit-transition-duration : #{$duration}s; /* Safari / Chrome */
	transition-duration : #{$duration}s; /* W3C */
}

@mixin transition-delay($delay : 0.5) {
	-moz-transition-delay : #{$delay}s; /* FireFox */
	-webkit-transition-delay : #{$delay}s; /* Safari / Chrome */
	transition-delay : #{$delay}s; /* W3C */
}

@mixin transition-property($property : opacity) {
	-moz-transition-property : $property; /* FireFox */
	-webkit-transition-property : $property; /* Safari / Chrome */
	transition-property : $property; /* W3C */
}


@mixin transition-timing-function($ease : ease-out) {
	/* linear|ease|ease-in|ease-out|ease-in-out|cubic-bezier(n,n,n,n); */
	-webkit-transition-timing-function: $ease;
	-moz-transition-timing-function: $ease;
	transition-timing-function: $ease;
}

@mixin transform-origin($x : 0px, $y : 0px){
	-webkit-transform-origin: $x $y;
	-moz-transform-origin: $x $y;
	-ms-transform-origin: $x $y;
	transform-origin: $x $y;
}

/*-------------------------------------------------------------------
	Animation
-------------------------------------------------------------------*/

@mixin keyframe($animation_name) {
	@-webkit-keyframes #{$animation_name}{
		@content;
	}
	
	@-moz-keyframes #{$animation_name} {
		@content;
	}
	
	@keyframes #{$animation_name} {
		@content;
	}
}

/*
    Example usage: 
    @include animation(changecolour, 5s, 10s)
 */
@mixin animation($name, $properties : "") {
	-webkit-animation: $name unquote($properties);
	   -moz-animation: $name unquote($properties);
	        animation: $name unquote($properties);
}

@mixin animation-name($name) {
	-webkit-animation-name: $name;
	   -moz-animation-name: $name;
	        animation-name: $name;
}

@mixin animation-delay($delay : 1s) {
	-webkit-animation-delay: $delay;
	   -moz-animation-delay: $delay;
	        animation-delay: $delay;
}

@mixin animation-duration($duration : 1s) {
	-webkit-animation-duration: $duration;
	   -moz-animation-duration: $duration;
	        animation-duration: $duration;
}

@mixin animation-fill-mode($mode : both) {
	-webkit-animation-fill-mode: $mode;
	   -moz-animation-fill-mode: $mode;
	        animation-fill-mode: $mode;
}

@mixin animation-timing-function($function : ease-out) {
	-webkit-animation-timing-function: $function;
	   -moz-animation-timing-function: $function;
	        animation-timing-function: $function;
}

/*-------------------------------------------------------------------
	Grid
-------------------------------------------------------------------*/

@mixin columns($count : 3, $gap : 10px) {
    -moz-column-count:$count;
    -moz-column-gap:$gap;
    -webkit-column-count:$count;
    -webkit-column-gap:$gap;
    column-count:$count;
    column-gap:$gap;
}

@mixin row() {
	&:after {
		clear:both;
	}
	
	&:before, &:after {
		content:"";
		display:table;
		line-height:0;
	}
	
	[class*="col-"] {
		box-sizing:border-box;
		display:block;
		float:left;
		min-height: 30px;
		width:100%;
	}
	
	@content;
}


/*-------------------------------------------------------------------
	SVG Icons generation
-------------------------------------------------------------------*/
@mixin grunticon-sizes($icon){
	@if type-of(nth(nth($icon,3),1)) == string{
		$size:nth($icon,3);

		&.icon-#{nth($size,1)}{
			height:#{nth($size, 3)};
			width:#{nth($size, 2)};
		}
	} @else{
		@each $size in nth($icon,3){
			&.icon-#{nth($size,1)}{
				height:#{nth($size, 3)};
				width:#{nth($size, 2)};
			}
		}
	}
}

@mixin grunticon($icon){
	height:#{nth($icon, 2)};
	width:#{nth($icon, 1)};

	// Add size classes
	@if length($icon) > 2 and type-of(nth($icon,3)) == list{
		@include grunticon-sizes($icon);
	}
}


/*-------------------------------------------------------------------
	Utilities
-------------------------------------------------------------------*/

/* 
* @include triangle within a pseudo element and add positioning properties (ie. top, left)
* $direction: up, down, left, right
*/
@mixin triangle($direction, $size: 6px, $color: #222){
  content: '';
  display: block;
  position: absolute;
  height: 0; width: 0;
  @if ($direction == 'up'){
    border-bottom: $size solid $color;
    border-left: 1/2*$size solid transparent;
    border-right: 1/2*$size solid transparent;
  }
  @else if ($direction == 'down'){
    border-top: $size solid $color;
    border-left: 1/2*$size solid transparent;
    border-right: 1/2*$size solid transparent;
  }
  @else if ($direction == 'left'){
    border-top: 1/2*$size solid transparent;
    border-bottom: 1/2*$size solid transparent;
    border-right: $size solid $color;
  }
  @else if ($direction == 'right'){
    border-top: 1/2*$size solid transparent;
    border-bottom: 1/2*$size solid transparent;
    border-left: $size solid $color;
  }
}

@mixin hui_tooltip($content: attr(data-tooltip), $direction: top) {
  position: relative;
  &:before, &:after {
    display: none;
    z-index: 98;
  }
  &:hover {
    &:after { // for text bubble
      content: $content;
      display: block;
      position: absolute;
      height: 12px; // (makes total height including padding 22px)
      padding: 6px;
      font-size: 12px;
      white-space: nowrap;
      color: #fff;
      @include text-shadow(1px 1px #000);
      background-color: #222;
    }
    @if ($direction == 'top'){
      &:before {
        @include triangle(down, 6px, #222);
        top: -6px; margin-top: 0;
        left: 47%;
      }
      &:after {
        top: -28px;
        left: 47%; margin-left: -20px;
      }
    }
    @else if ($direction == 'bottom'){
      &:before {
        @include triangle(up, 6px, #222);
        top: auto; margin-top: 0;
        bottom: -6px;
        left: 47%;
      }
      &:after {
        bottom: -28px;
        left: 47%; margin-left: -20px;
      }
    }
  }
}

@mixin ghost(){
  &:before {
    content: '';
    display: inline-block;
    vertical-align: middle;
    height: 100%; width: .1px;
  }
}



// Flexbox Containers
//
// The 'flex' value causes an element to generate a block-level flex
// container box.
//
// The 'inline-flex' value causes an element to generate a inline-level
// flex container box. 
//
// display: flex | inline-flex
//
// http://w3.org/tr/css3-flexbox/#flex-containers
//
// (Placeholder selectors for each type, for those who rather @extend)

@mixin flexbox {
	display: -webkit-box;
	display: -webkit-flex;
	display: -moz-flex;
	display: -ms-flexbox;
	display: flex;
}

//----------------------------------

@mixin inline-flex {
	display: -webkit-inline-box;
	display: -webkit-inline-flex;
	display: -moz-inline-flex;
	display: -ms-inline-flexbox;
	display: inline-flex;
}

//----------------------------------------------------------------------

// Flexbox Direction
//
// The 'flex-direction' property specifies how flex items are placed in
// the flex container, by setting the direction of the flex container's
// main axis. This determines the direction that flex items are laid out in. 
//
// Values: row | row-reverse | column | column-reverse
// Default: row
//
// http://w3.org/tr/css3-flexbox/#flex-direction-property

@mixin flex-direction($value: row) {
	@if $value == row-reverse {
		-webkit-box-direction: reverse;
		-webkit-box-orient: horizontal;
	} @else if $value == column {
		-webkit-box-direction: normal;
		-webkit-box-orient: vertical;
	} @else if $value == column-reverse {
		-webkit-box-direction: reverse;
		-webkit-box-orient: vertical;
	} @else {
		-webkit-box-direction: normal;
		-webkit-box-orient: horizontal;
	}
	-webkit-flex-direction: $value;
	-moz-flex-direction: $value;
	-ms-flex-direction: $value;
	flex-direction: $value;
}

//----------------------------------------------------------------------

// Flexbox Wrap
//
// The 'flex-wrap' property controls whether the flex container is single-line
// or multi-line, and the direction of the cross-axis, which determines
// the direction new lines are stacked in. 
//
// Values: nowrap | wrap | wrap-reverse
// Default: nowrap
//
// http://w3.org/tr/css3-flexbox/#flex-wrap-property

@mixin flex-wrap($value: nowrap) {
	// No Webkit Box fallback.
	-webkit-flex-wrap: $value;
	-moz-flex-wrap: $value;
	@if $value == nowrap {
		-ms-flex-wrap: none;
	} @else { 
		-ms-flex-wrap: $value; 
	}
	flex-wrap: $value;
}

//----------------------------------------------------------------------

// Flexbox Flow (shorthand)
//
// The 'flex-flow' property is a shorthand for setting the 'flex-direction'
// and 'flex-wrap' properties, which together define the flex container's
// main and cross axes.
//
// Values: <flex-direction> | <flex-wrap> 
// Default: row nowrap
//
// http://w3.org/tr/css3-flexbox/#flex-flow-property

@mixin flex-flow($values: (row nowrap)) {
	// No Webkit Box fallback.
	-webkit-flex-flow: $values;
	-moz-flex-flow: $values;
	-ms-flex-flow: $values;
	flex-flow: $values;
}

//----------------------------------------------------------------------

// Flexbox Order
//
// The 'order' property controls the order in which flex items appear within
// their flex container, by assigning them to ordinal groups.
//
// Default: 0
//
// http://w3.org/tr/css3-flexbox/#order-property

@mixin order($int: 0) {
	-webkit-box-ordinal-group: $int + 1;
	-webkit-order: $int;
	-moz-order: $int;
	-ms-flex-order: $int;
	order: $int;
}

//----------------------------------------------------------------------

// Flexbox Grow
//
// The 'flex-grow' property sets the flex grow factor. Negative numbers
// are invalid.
//
// Default: 0
//
// http://w3.org/tr/css3-flexbox/#flex-grow-property

@mixin flex-grow($int: 0) {
	-webkit-box-flex: $int;
	-webkit-flex-grow: $int;
	-moz-flex-grow: $int;
	-ms-flex-positive: $int;
	flex-grow: $int;
}

//----------------------------------------------------------------------

// Flexbox Shrink
//
// The 'flex-shrink' property sets the flex shrink factor. Negative numbers
// are invalid.
//
// Default: 1
//
// http://w3.org/tr/css3-flexbox/#flex-shrink-property

@mixin flex-shrink($int: 1) {
	-webkit-flex-shrink: $int;
	-moz-flex-shrink: $int;
	-ms-flex-negative: $int;
	flex-shrink: $int;
}

//----------------------------------------------------------------------

// Flexbox Basis
//
// The 'flex-basis' property sets the flex basis. Negative lengths are invalid. 
//
// Values: Like "width" 
// Default: auto
//
// http://www.w3.org/TR/css3-flexbox/#flex-basis-property

@mixin flex-basis($value: auto) {
	-webkit-flex-basis: $value;
	-moz-flex-basis: $value;
	-ms-flex-preferred-size: $value;
	flex-basis: $value;
}

//----------------------------------------------------------------------

// Flexbox "Flex" (shorthand)
//
// The 'flex' property specifies the components of a flexible length: the
// flex grow factor and flex shrink factor, and the flex basis. When an
// element is a flex item, 'flex' is consulted instead of the main size
// property to determine the main size of the element. If an element is
// not a flex item, 'flex' has no effect.
//
// Values: none | <flex-grow> <flex-shrink> || <flex-basis>
// Default: See individual properties (1 1 0).
//
// http://w3.org/tr/css3-flexbox/#flex-property

@mixin flex($fg: 1, $fs: null, $fb: null) {
    
	// Set a variable to be used by box-flex properties
	$fg-boxflex: $fg;

	// Box-Flex only supports a flex-grow value so let's grab the
	// first item in the list and just return that.
	@if type-of($fg) == 'list' {
		$fg-boxflex: nth($fg, 1);
	}

	-webkit-box-flex: $fg-boxflex;
	-webkit-flex: $fg $fs $fb;
	-moz-box-flex: $fg-boxflex;
	-moz-flex: $fg $fs $fb;
	-ms-flex: $fg $fs $fb;
	flex: $fg $fs $fb;
}

//----------------------------------------------------------------------

// Flexbox Justify Content
//
// The 'justify-content' property aligns flex items along the main axis
// of the current line of the flex container. This is done after any flexible
// lengths and any auto margins have been resolved. Typically it helps distribute
// extra free space leftover when either all the flex items on a line are
// inflexible, or are flexible but have reached their maximum size. It also
// exerts some control over the alignment of items when they overflow the line.
//
// Note: 'space-*' values not supported in older syntaxes.
//
// Values: flex-start | flex-end | center | space-between | space-around
// Default: flex-start
//
// http://w3.org/tr/css3-flexbox/#justify-content-property

@mixin justify-content($value: flex-start) {
	@if $value == flex-start {
		-webkit-box-pack: start;
		-ms-flex-pack: start;
	} @else if $value == flex-end {
		-webkit-box-pack: end;
		-ms-flex-pack: end;
	} @else if $value == space-between {
		-webkit-box-pack: justify;
		-ms-flex-pack: justify;
	} @else if $value == space-around {
		-ms-flex-pack: distribute;		
	} @else {
		-webkit-box-pack: $value;
		-ms-flex-pack: $value;
	}
	-webkit-justify-content: $value;
	-moz-justify-content: $value;
	justify-content: $value;
}

//----------------------------------------------------------------------

// Flexbox Align Items
//
// Flex items can be aligned in the cross axis of the current line of the
// flex container, similar to 'justify-content' but in the perpendicular
// direction. 'align-items' sets the default alignment for all of the flex
// container's items, including anonymous flex items. 'align-self' allows
// this default alignment to be overridden for individual flex items. (For
// anonymous flex items, 'align-self' always matches the value of 'align-items'
// on their associated flex container.) 
//
// Values: flex-start | flex-end | center | baseline | stretch
// Default: stretch
//
// http://w3.org/tr/css3-flexbox/#align-items-property

@mixin align-items($value: stretch) {
	@if $value == flex-start {
		-webkit-box-align: start;
		-ms-flex-align: start;
	} @else if $value == flex-end {
		-webkit-box-align: end;
		-ms-flex-align: end;
	} @else {
		-webkit-box-align: $value;
		-ms-flex-align: $value;
	}
	-webkit-align-items: $value;
	-moz-align-items: $value;
	align-items: $value;
}

//----------------------------------

// Flexbox Align Self
//
// Values: auto | flex-start | flex-end | center | baseline | stretch
// Default: auto

@mixin align-self($value: auto) {
	// No Webkit Box Fallback.
	-webkit-align-self: $value;
	-moz-align-self: $value;
	@if $value == flex-start {
		-ms-flex-item-align: start;
	} @else if $value == flex-end {
		-ms-flex-item-align: end;
	} @else {
		-ms-flex-item-align: $value;
	}
	align-self: $value;
}

//----------------------------------------------------------------------

// Flexbox Align Content
//
// The 'align-content' property aligns a flex container's lines within the
// flex container when there is extra space in the cross-axis, similar to
// how 'justify-content' aligns individual items within the main-axis. Note,
// this property has no effect when the flexbox has only a single line.
//
// Values: flex-start | flex-end | center | space-between | space-around | stretch
// Default: stretch
//
// http://w3.org/tr/css3-flexbox/#align-content-property

@mixin align-content($value: stretch) {
	// No Webkit Box Fallback.
	-webkit-align-content: $value;
	-moz-align-content: $value;
	@if $value == flex-start {
		-ms-flex-line-pack: start;
	} @else if $value == flex-end {
		-ms-flex-line-pack: end;
	} @else {
		-ms-flex-line-pack: $value;
	}
	align-content: $value;
}

@mixin navbar-main-vertical-align($element-height) {
  margin-top: (($navbar-main-height - $element-height) / 2);
  margin-bottom: (($navbar-main-height - $element-height) / 2);
}


// Button variants
//
// Easily pump out default styles, as well as :hover, :focus, :active,
// and disabled options for all buttons

@mixin button-variant($color, $background, $border) {
  color: $color;
  background-color: $background;
  border-color: $border;
	.icon {
		path {
			fill: $color;
		}
	}

  &:focus,
  &.focus {
    color: $color;
    background-color: lighten($background, 10%);
        border-color: lighten($border, 25%);
	  .icon{
		  path{
			  fill:$color;
		  }
	  }
  }
  &:hover {
    color: $color;
    background-color: lighten($background, 10%);
        border-color: lighten($border, 10%);
	  .icon{
		  path{
			  fill:$color;
		  }
	  }
	  &.btn-inverse {
		  color: $white;
		  background-color: $color;
		  border-color: $color;
		  .icon{
			  path{
				  fill:$white;
			  }
		  }
	  }

  }
  &:active,
  &.active,
  .open > &.dropdown-toggle {
    color: $color;
    background-color: lighten($background, 10%);
        border-color: lighten($border, 10%);
	  .icon{
		  path{
			  fill:$color;
		  }
	  }

    &:hover,
    &:focus,
    &.focus {
      color: $color;
      background-color: lighten($background, 10%);
		border-color: lighten($border, 25%);
		.icon {
			path {
				fill: $color;
			}
		}
		&.btn-inverse{
			
			color: $white;
		   	background-color: $color;
			border-color: $color;
			.icon {
				path {
					fill: $white;
				}
			}
		}
    }
  }
  &:active,
  &.active,
  .open > &.dropdown-toggle {
    background-image: none;
  }
  &.disabled,
  &[disabled],
  fieldset[disabled] & {
    &:hover,
    &:focus,
    &.focus {
      background-color: $background;
          border-color: $border;
    }
  }

  .badge {
    color: $background;
    background-color: $color;
  }
}


@mixin form-control-focus($color: $input-border-focus) {
  $color-rgba: rgba(red($color), green($color), blue($color), .6);
  &:focus {
    border-color: $color;
    outline: 0;
    box-shadow: none;
  }
}

// Tables

@mixin table-row-variant($state, $text-color) {
  // Exact selectors below required to override `.table-striped` and prevent
  // inheritance to nested tables.
  .table > tbody > tr {
    > td.#{$state},
    > th.#{$state},
    &.#{$state} > td,
    &.#{$state} > th {
		color: inherit;
		background-color: inherit;
		&[headers*="view-field-status-table-column"] {
			color: $text-color;
			background-color: inherit;
		}
		
		@if $state != 'success'{
			.pulse{
				@include pulse(20, 30, $text-color);

				@include responsive($screen-md){
					@include pulse(15, 25, $text-color);
				}

				@include responsive($screen-xs){
					@include pulse(10, 20, $text-color);
				}
			}
		}
    }
  }

  // Hover states for `.table-hover`
  // Note: this is not available for cells or rows within `thead` or `tfoot`.
  .table-hover > tbody > tr {
    > td.#{$state}:hover,
    > th.#{$state}:hover,
    &.#{$state}:hover > td,
    &:hover > .#{$state},
    &.#{$state}:hover > th {
		color: inherit;
		background-color: inherit;
		&[headers*="view-field-status-table-column"] {
			color: $text-color;
			background-color: inherit;
		}
		@if $state != 'success' {
			.pulse {
				@include pulse(20, 30, $text-color);

				@include responsive($screen-md){
					@include pulse(15, 25, $text-color);
				}

				@include responsive($screen-xs){
					@include pulse(10, 20, $text-color);
				}
			}
		}
    }
  }
}


@mixin make-grid-columns($gutter: $grid-gutter-width, $i: 1, $list: ".col-xs-#{$i}, .col-sm-#{$i}, .col-md-#{$i}, .col-lg-#{$i}") {
  @for $i from (1 + 1) through $grid-columns {
    $list: "#{$list}, .col-xs-#{$i}, .col-sm-#{$i}, .col-md-#{$i}, .col-lg-#{$i}";
  }
  #{$list} {
    position: relative;
    // Prevent columns from collapsing when empty
    min-height: 0;
    // Inner gutter via padding
    padding-left:  ceil(($gutter / 2));
    padding-right: floor(($gutter / 2));
	  @include responsive(950px) {
		  padding-left: ceil(($gutter / 4));
		  padding-right: floor(($gutter / 4));
	  }
  }
}

@mixin container-fixed($gutter: $grid-gutter-width) {
  margin-right: auto;
  margin-left: auto;
  padding-left: 0;
  padding-right: 0;
  @include clearfix;
}

// Creates a wrapper for a series of columns
@mixin make-row($gutter: $grid-gutter-width) {
  margin-left:  ceil(($gutter / -2));
  margin-right: floor(($gutter / -2));
	@include responsive(950px){
		margin-left: ceil(($gutter / -4));
		margin-right: floor(($gutter / -4));
	}
  @include clearfix;
}
// Creates a wrapper for a series of columns
@mixin make-row-inner($gutter: $grid-gutter-width) {
  margin-left:  $gutter;
  margin-right: $gutter;
	@include clearfix;
	@include responsive(950px) {
		margin-left: ceil(($gutter / 2));
		margin-right: ceil(($gutter / 2));
	}

}

@mixin list-full() {
	margin: 0;
	padding: 0;
	width: 100%;

	li {
		border-bottom: 1px solid rgba($electric-lime, 0.3);
		display: table;
		line-height: 1;
		list-style: none;
		padding: 20px 0;
		width: 100%;
		@include font-size(18);

		&:last-child {
			border-bottom: none;
		}

		> span {
			display: table-cell;
			padding: 0 0 0 5px;
			text-align: right;
			vertical-align: middle;
		}

		@include responsive(1100px) {
			@include font-size($font-size-base);
		}
	}

}

@mixin list-bullets() {
	margin:0;
	padding:0;

	li {
		line-height:1.25;
		list-style:none;
		margin:22px 0 0 0;
		padding:0 0 0 22px;
		position:relative;

		&:before,
		&:after {
			background:$white;
			content:'';
			height:8px;
			left:2px;
			position:absolute;
			top:6px;
			width:8px;
			z-index:-1;
			@include border-radius(50%);
		}

		&:after {
			background:rgba($white, 0.3);
			height:12px;
			left:0;
			top:4px;
			width:12px;
		}

		@include responsive($screen-sm) {
			margin:12px 0 0 0;
		}
	}

}

/*-------------------------------------------------------------------
	Style mixins
-------------------------------------------------------------------*/

@mixin title-page() {
	font-weight: $regular;
	margin-top: 0;
	margin-bottom: 0;
	padding:$content-padding-base;
	border-bottom: 1px solid $gray-light;
	@include font-size(36);
	line-height: 40px;

	@include responsive(1300px) {
		padding:$content-padding-large;
		@include font-size(30);
		line-height: 34px;
	}

	@include responsive(950px) {
		padding:$content-padding-small;
	}

	@include responsive($screen-sm){
		@include font-size(28);
		line-height: 32px;
	}

	span {
		display: block;
	}
}

@mixin title-default() {
	margin: 0;
	@include font-size(24);
	font-weight: $regular;
	@include responsive(1300px){
		@include font-size(21);
	}
	@include responsive($screen-sm){
		@include font-size(19);
	}
}

@mixin title-content() {
	margin: 0;
	font-weight: $bold;
	@include font-size(36);
	line-height: 40px;
	margin-bottom: 35px;
	@include responsive(1300px){
		@include font-size(30);
		line-height: 34px;
		margin-bottom: 30px;
	}
	@include responsive($screen-sm){
		@include font-size(28);
		line-height: 32px;
		margin-bottom: 25px;
	}
}

@mixin title-bordered() {
	border-top:1px solid $gray-light;
	border-bottom:1px solid $gray-light;
	font-weight:$regular;
	line-height:1;
	margin:0;
	padding:45px 0 45px 40px;
	@include font-size(36);

	@include responsive(1300px) {
		padding:35px 0 35px 30px;
		@include font-size(30);
	}

	@include responsive(950px) {
		padding:25px 20px;
	}

	@include responsive($screen-sm) {
		@include font-size(28);
	}
}