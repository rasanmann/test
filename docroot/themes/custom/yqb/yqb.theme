<?php

/*
 * Searches for $needle in the multidimensional array $haystack.
 *
 * @param mixed $needle The item to search for
 * @param array $haystack The array to search
 * @return array|bool The indices of $needle in $haystack across the
 *  various dimensions. FALSE if $needle was not found.
 */

use Drupal\file\Entity\File;
use Drupal\image\Entity\ImageStyle;

function recursive_array_search($needle, $haystack) {
  foreach ($haystack as $key => $value) {
    if ($needle === $value) {
      return array($key);
    }
    else if (is_array($value) && $subkey = recursive_array_search($needle, $value)) {
      array_unshift($subkey, $key);
      return $subkey;
    }
  }
}

/**
 * @file
 * Bootstrap sub-theme.
 *
 * Place your custom PHP code in this file.
 */
function yqb_preprocess_html(array &$variables) {
  $variables['base_path'] = str_replace('//', '/', '/' . base_path());

  $path = preg_replace('/\?(.*)/', '', implode('/', array_slice(explode('/', trim(\Drupal::request()->getRequestUri(), '/')), 1)));

  $variables['body_id'] = trim(preg_replace('/[^a-zA-Z\d\s:]/', '-', $path), '-');

  $variables['body_classes'] = implode(' ', [
    'path-' . $variables['body_id'],
    (!$variables['root_path']) ? 'path-frontpage' : 'path-' . \Drupal\Component\Utility\Html::getClass($variables['root_path']),
    (isset($variables['logged_in'])) ? 'user-logged-in' : NULL,
    (isset($variables['node_type'])) ? 'page-node-type-' . \Drupal\Component\Utility\Html::getClass($variables['node_type']) : NULL,
    (isset($variables['db_offline'])) ? 'db-offline' : NULL,
    ($variables['theme']['settings']['navbar_position']) ? 'navbar-is-' . \Drupal\Component\Utility\Html::getClass($variables['theme']['settings']['navbar_position']) : NULL,
    (isset($variables['page']['content']['system_main']['#view_id'])) ? 'view-page-' . $variables['page']['content']['system_main']['#view_id'] : '',
    ($variables['theme']['has_glyphicons']) ? 'has-glyphicons' : NULL,
  ]);
}

function yqb_page_attachments_alter(array &$page) {
  // Webview specific css sheet
  if (isset($_GET['webview'])) {
    $page['#attached']['library'][] = 'yqb/webview';
  }

  // Viewport meta
  foreach ($page['#attached']['html_head'] as $k => $meta) {
    if ($meta[1] == 'viewport') {
      $page['#attached']['html_head'][$k][0]['#attributes']['content'] = 'width=device-width, initial-scale=1, maximum-scale=1, user-scalable=0';
    }
  }

  // Add touch icons
  // Apple
  $page['#attached']['html_head'][] = [
    [
      '#tag' => 'meta',
      '#weight' => 100,
      '#attributes' => [
        'name' => 'apple-mobile-web-app-capable',
        'content' => 'yes',
      ],
    ],
    'apple-mobile-web-app-capable',
  ];

  $page['#attached']['html_head'][] = [
    [
      '#tag' => 'meta',
      '#weight' => 100,
      '#attributes' => [
        'name' => 'apple-mobile-web-app-title',
        'content' => 'YQB',
      ],
    ],
    'apple-mobile-web-app-title',
  ];

  $sizes = [57, 60, 72, 76, 114, 120, 144, 152, 180];

  foreach ($sizes as $size) {
    $page['#attached']['html_head'][] = [
      [
        '#tag' => 'link',
        '#weight' => 100,
        '#attributes' => [
          'rel' => 'apple-touch-icon',
          'sizes' => $size . 'x' . $size,
          'href' => '/' . drupal_get_path('theme', 'yqb') . '/img/icons/apple-icon-' . $size . 'x' . $size . '.png?v3',
        ],
      ],
      'apple-' . $size,
    ];
  }

  // Android
  $sizes = [36, 48, 72, 96, 144, 192];

  foreach ($sizes as $size) {
    $page['#attached']['html_head'][] = [
      [
        '#tag' => 'link',
        '#weight' => 200,
        '#attributes' => [
          'rel' => 'icon',
          'type' => 'image/png',
          'sizes' => $size . 'x' . $size,
          'href' => '/' . drupal_get_path('theme', 'yqb') . '/img/icons/android-icon-' . $size . 'x' . $size . '.png?v3',
        ],
      ],
      'android-' . $size,
    ];
  }

  // Android manifest
  $page['#attached']['html_head'][] = [
    [
      '#tag' => 'link',
      '#weight' => 200,
      '#attributes' => [
        'rel' => 'manifest',
        'href' => '/manifest.json',
      ],
    ],
    'android-manifest',
  ];

  // Favicons
  $sizes = [32, 96];

  foreach ($sizes as $size) {
    $page['#attached']['html_head'][] = [
      [
        '#tag' => 'link',
        '#weight' => 300,
        '#attributes' => [
          'rel' => 'icon',
          'type' => 'image/png',
          'sizes' => $size . 'x' . $size,
          'href' => '/' . drupal_get_path('theme', 'yqb') . '/img/icons/favicon-' . $size . 'x' . $size . '.png?v3',
        ],
      ],
      'favicon-' . $size,
    ];
  }

  // Microsoft specific
  $page['#attached']['html_head'][] = [
    [
      '#tag' => 'meta',
      '#weight' => 400,
      '#attributes' => [
        'name' => 'msapplication-TileColor',
        'content' => '#ffffff',
      ],
    ],
    'microsoft-tile-color',
  ];

  $sizes = [70, 144, 150, 310];

  foreach ($sizes as $size) {
    $page['#attached']['html_head'][] = [
      [
        '#tag' => 'link',
        '#weight' => 400,
        '#attributes' => [
          'rel' => 'icon',
          'type' => 'image/png',
          'sizes' => $size . 'x' . $size,
          'href' => '/' . drupal_get_path('theme', 'yqb') . '/img/icons/ms-icon-' . $size . 'x' . $size . '.png?v3',
        ],
      ],
      'microsoft-tile-image-' . $size,
    ];
  }

  $page['#attached']['html_head'][] = [
    [
      '#tag' => 'meta',
      '#weight' => 400,
      '#attributes' => [
        'name' => 'theme-color',
        'content' => '#ffffff',
      ],
    ],
    'theme-color',
  ];
}

function yqb_js_settings_alter(array &$javascript) {
  if (\Drupal::request()->headers->has('X-PJAX') || \Drupal::request()->headers->has('X-Pjax')) {
    header(sprintf('x-drupal-settings: %s', json_encode($javascript)));
  }
}

function yqb_preprocess_page_title(array &$variables) {
  if (\Drupal::service('path.matcher')->isFrontPage()) {
    $variables['title'] = NULL;
  }
  // Load the node entity from current route
  if ($contact_form = \Drupal::routeMatch()->getParameter('contact_form')) {

    if ($contact_form->id() == 'candidature_spontanee' && isset($_GET['id'])) {
      $node_storage = \Drupal::entityTypeManager()->getStorage('node');
      $node = $node_storage->load($_GET['id']);

      // Set the page title
      if (!empty($node) && $node->getType() == 'career') {
        $variables['title'] = t('Candidature - @job', array('@job' => $node->getTitle()));
      }
    }
  }
}

function yqb_library_info_alter(array &$libraries, $module) {
  if ($module === 'core' && isset($libraries['drupal.autocomplete'])) {
    // Replace buggy search_autocomplete script with theme script
    $libraries['drupal.autocomplete']['js'] = array(
      '/' . drupal_get_path('theme', 'yqb') . '/js/libraries/autocomplete/jquery.autocomplete.custom.js' => array(),
    );
  }
}

function yqb_preprocess_block(array &$variables) {

  if (isset($variables['elements']['content']['#block_content'])) {
    if ($variables['elements']['content']['#block_content']->bundle() === 'block_slider_gallery') {
      $originals = [];
      $thumbnails = [];

      foreach ($variables['elements']['content']['field_image_slide']['#items'] as &$item) {

        /** @var Drupal\image\Plugin\Field\FieldType\ImageItem $item */
        $file = \Drupal\file\Entity\File::load($item->getValue()['target_id']);
        $file_uri = $file->getFileUri();

        $image_uri_originals = file_create_url($file_uri);
        $image_uri_thumbnails = \Drupal\image\Entity\ImageStyle::load('thumbnail_240xauto_')->buildUrl($file_uri);

        $originals[] = $image_uri_originals;
        $thumbnails[] = $image_uri_thumbnails;
      }

      $variables['content']['field_image_slide_originals'] = $originals;
      $variables['content']['field_image_slide_thumbnails'] = $thumbnails;
    }
  }

  // Hide About menu in news archives
  if (isset($variables['elements']['#configuration']['id'])) {
    if (($variables['elements']['#configuration']['id'] == 'system_menu_block:a-propos' || $variables['elements']['#configuration']['id'] == 'system_menu_block:barre-laterale---a-propos-e') && preg_match('/communiques-de-presse|press-release|blog/', \Drupal::request()->getRequestUri())) {
      $variables = array();
    }
  }
}

function yqb_preprocess_container(array &$variables) {
  if (array_key_exists('#type', $variables['element']) && $variables['element']['#type'] === 'more_link') {
    $variables['more_link'] = [
      'title' => $variables['element']['#title'],
      'url' => $variables['element']['#url'],
    ];
  }
}

function yqb_form_alter(&$form, &$form_state, $form_id) {
  switch ($form_id) {
    case 'contact_message_contact_us_form':
    case 'contact_message_comments_form':
      unset($form['actions']['preview']);
      break;

    case 'contact_message_candidature_spontanee_form':
    case 'yamlform_submission_job_application_form':
      $offer = (isset($_GET['id'])) ? $_GET['id'] : ((isset($_GET['offer'])) ? $_GET['offer'] : NULL);
      if (!empty($offer)) {
        $node_storage = \Drupal::entityTypeManager()->getStorage('node');
        $node = $node_storage->load($offer);

        if (!empty($node) && $node->getType() == 'career') {
          $form['field_offre']['widget']['#default_value'] = $offer;

          $form['field_departement']['#type'] = 'hidden';
          $form['field_departement']['widget']['#default_value'] = current($node->field_department->getValue());
        }
        else {
          $form['field_offre']['#type'] = 'hidden';
        }
      }
      else {
        $form['field_offre']['#type'] = 'hidden';
      }

      // Redirect to same page
      $form['actions']['submit']['#submit'][] = 'yqb_job_submit';
      unset($form['actions']['preview']);
      break;

    case 'search_form':
      $form['#method'] = 'get';
      break;

    case 'user_form';
      $current_user = \Drupal::currentUser();

      if ($current_user) {
        if (!in_array('administrator', $current_user->getRoles())) {
          $form['field_uuid']['#access'] = FALSE;
          $form['field_facebook_user_id']['#access'] = FALSE;
          $form['field_google_user_id']['#access'] = FALSE;
          $form['field_push_ios_token']['#access'] = FALSE;
          $form['field_push_android_token']['#access'] = FALSE;
          $form['field_caller_id']['#access'] = FALSE;
          $form['field_language']['#access'] = FALSE;
        }
      }
      break;

    case 'webform_submission_job_application_add_form':
      $offer = \Drupal::request()->query->get('offer');
      $id = \Drupal::request()->query->get('id');
      $redirect = FALSE;

      if (empty($id)) {
        if (!empty($offer)) {
          $redirect = TRUE;
        }
      }
      else {
        $node = \Drupal\node\Entity\Node::load($id);
        if ($node && $node->isPublished()) {
          $currentLanguage = \Drupal::languageManager()->getCurrentLanguage(\Drupal\Core\Language\LanguageInterface::TYPE_CONTENT)->getId();
          $taxonomyTerm = $node->get('field_department')->first()->get('entity')->getTarget()->getValue();
          $taxonomyTermTrans = \Drupal::service('entity.repository')->getTranslationFromContext($taxonomyTerm, $currentLanguage);
          $translatedTerm = $taxonomyTermTrans->getName();
          $form['elements']['offer']['#default_value'] = $node->getTitle();
          $form['elements']['department']['#default_value'] = $translatedTerm;
          $form['elements']['department']['#type'] = 'hidden';

          $form['field_offre']['widget']['#default_value'] = 'bob';
        }
        else {
          $redirect = TRUE;
        }
      }

      if ($redirect) {
        \Drupal::messenger()->addMessage(t('This job application is no longer available.'), \Drupal\Core\Messenger\MessengerInterface::TYPE_ERROR);
        $response = new \Symfony\Component\HttpFoundation\RedirectResponse(\Drupal\Core\Url::fromRoute('view.careers.page_1')->toString());
        $response->send();
        exit;
      }
      break;
  }
}


function yqb_job_submit(&$form, \Drupal\Core\Form\FormStateInterface $form_state) {
  $params = ['contact_form' => 'candidature_spontanee'];

  if (isset($_GET['id'])) {
    $params['id'] = $_GET['id'];
  }

  // Clear messages
  $_SESSION['messages'] = '';
  drupal_set_message(t('Votre candidature a été soumise'));

  $form_state->setRedirect('entity.contact_form.canonical', $params);
}

function yqb_theme_suggestions_field_alter(array &$suggestions, array $variables) {

}

function yqb_theme_suggestions_menu_alter(array &$suggestions, array $variables) {
  if (isset($variables['menu_name'])) {
    //    var_dump($variables['menu_name']);
    switch ($variables['menu_name']) {
      case 'main':
      case 'main-en':
        $suggestions[] = 'menu__main';
        break;
      case 'secondary':
      case 'secondary-en':
        $suggestions[] = 'menu__secondary';
        break;
      case 'homepage-tiles':
      case 'homepage-tiles-en':
        $suggestions[] = 'menu__homepage_tiles';
        break;
      case 'footer-main-nav' :
      case 'navigation-principale---pie':
        $suggestions[] = 'menu__footer_main_nav';
        break;
      case 'footer-social-nav' :
      case 'navigation-reseaux-sociaux-':
        $suggestions[] = 'menu__footer_social_nav';
        break;
    }
  }
}


function yqb_theme_suggestions_block_alter(array &$suggestions, array $variables) {
  switch (TRUE) {
    // Main menu
    case in_array('block__system_menu_block__main', $suggestions):
    case in_array('block__system_menu_block__main_en', $suggestions):
      $suggestions[] = 'block__system_menu_block__main';
      break;

    // Flights schedules on home page
    case in_array('block__views_block__arrivals_block_1', $suggestions):
    case in_array('block__views_block__departures_block_1', $suggestions):
      $suggestions[] = 'block__views_block__schedules_block_1';
      break;

    case in_array('block__reminders_block', $suggestions):
      $suggestions[] = 'block__remindersblock';
      break;

    case in_array('block__parking_booker_block', $suggestions):
      $suggestions[] = 'block__parkingbookerblock';
      break;

    case in_array('block__system_menu_block__footer_main_nav', $suggestions):
    case in_array('block__system_menu_block__navigation_principale___pie', $suggestions):
      $suggestions[] = 'block__system_menu_block__footer_main_nav';
      break;

    case in_array('block__system_menu_block__footer_social_nav', $suggestions):
    case in_array('block__system_menu_block__navigation_reseaux_sociaux_', $suggestions):
      $suggestions[] = 'block__system_menu_block__footer_social_nav';
      break;

    case in_array('block__system_menu_block__secondary', $suggestions):
    case in_array('block__system_menu_block__secondary_en', $suggestions):
      $suggestions[] = 'block__system_menu_block__secondary';
      break;
  }

  // Custom blocks with panels
  if (isset($variables['elements']['content']['#block_content'])) {
    array_splice($suggestions, 1, 0, 'block__bundle__' . $variables['elements']['content']['#block_content']->bundle());
  }
}

function yqb_preprocess_views_view_unformatted(&$variables) {
  if ($variables['view']->id() === 'destinations') {
    $variables['rows_header_image'] = $variables['rows'];
    $variables['rows_iata'] = $variables['rows'];
    $variables['rows_square_images'] = $variables['rows'];
    $variables['rows_simple'] = $variables['rows'];

    foreach ($variables['rows_simple'] as &$row) {
      array_unshift($row['content']['#theme'], 'views_view_fields__destinations__simple__page_1');
    }

    foreach ($variables['rows_header_image'] as &$row) {
      array_unshift($row['content']['#theme'], 'views_view_fields__destinations__header_image__page_1');
    }

    foreach ($variables['rows_iata'] as &$row) {
      array_unshift($row['content']['#theme'], 'views_view_fields__destinations__iata__page_1');
    }

    foreach ($variables['rows_square_images'] as &$row) {
      array_unshift($row['content']['#theme'], 'views_view_fields__destinations__square_images__page_1');
    }
  }
}

function yqb_preprocess_views_view(array &$variables) {
  if (\Drupal::service('path.matcher')->isFrontPage()) {
    $variables['title'] = NULL;
  }
  elseif (isset($variables['view_array']['#view_id']) && $variables['view_array']['#view_id'] == 'publications') {
    $variables['download_form'] = \Drupal::formBuilder()->getForm('Drupal\yqb_forms\Form\DownloadPublicationsForm');
  }
}

function yqb_preprocess_views_view_table(array &$variables) {
  /** @var Drupal\views\Entity\View $view */
  $view = $variables['view']->storage;

  if ($view->getOriginalId() === 'arrivals' || $view->getOriginalId() === 'departures') {
    foreach ($variables['rows'] as &$row) {

      // Check if scheduled and estimated fields have that same values
      $scheduled = NULL;
      $estimated = NULL;

      if (array_key_exists('field_sta', $row['columns']) && array_key_exists('field_eta', $row['columns'])) {
        $scheduled = 'field_sta';
        $estimated = 'field_eta';
      }

      if (array_key_exists('field_std', $row['columns']) && array_key_exists('field_etd', $row['columns'])) {
        $scheduled = 'field_std';
        $estimated = 'field_etd';
      }

      $oldEstimated = FALSE;

      // If they have the same value, replace with a long hyphen
      if ($scheduled && $estimated) {
        $oldEstimated = $row['columns'][$estimated]['content'][0]['field_output']['#markup'];
        /** @var Drupal\Core\Render\Markup $row ['attributes'] */
        if (trim(strip_tags($row['columns'][$scheduled]['content'][0]['field_output']['#markup'])) === trim(strip_tags($row['columns'][$estimated]['content'][0]['field_output']['#markup']))) {
          $row['columns'][$estimated]['content'][0]['field_output']['#markup'] = '—';
        }
      }

      // Statuses
      if (array_key_exists('field_status', $row['columns'])) {
        /** @var Drupal\Core\Template\Attribute $row ['attributes'] */

        switch (TRUE) {
          // On time, nothing to add
          case $row['attributes']->hasClass('status-9'):

            break;

          // Arrived & Departed
          case $row['attributes']->hasClass('status-8'):
          case $row['attributes']->hasClass('status-10'):
            $row['attributes']->addClass('success');
            break;

          // Cancelled flight
          case $row['attributes']->hasClass('status-12'):
            $row['attributes']->addClass('danger');
            break;

          // Default : delayed, or something else
          default:
            $row['attributes']->addClass('warning');
            if ($oldEstimated) {
              $row['columns'][$estimated]['content'][0]['field_output']['#markup'] = $oldEstimated;
            }
            break;
        }
      }

    }
  }
  else if ($view->getOriginalId() === 'publications') {
    foreach ($variables['rows'] as $index => &$row) {
      if (isset($variables['view']->result[$index])) {
        $row['attributes']->setAttribute('data-created', date('Y-m-d', $variables['view']->result[$index]->node_field_data_created));
      }
    }
  }
}

/**
 * Prepares variables for swiftmailer templates.
 *
 * Default template: swiftmailer.html.twig.
 *
 * @param array $variables
 *   An associative array containing:
 *   - message: An associative array containing the message array.
 *   - body: The processed body.
 */
function yqb_preprocess_swiftmailer(&$variables) {
  // Try to detect if we're sending HTML content or plain text
  if (!preg_match('/^\</', trim($variables['body']->__toString()))) {
    // If it's not try to convert plain text into HTML

    // First, replace line breaks with <br />:
    $content = nl2br($variables['body']->__toString());

    // Then replace double <br /> with closing and opening paragraph tag
    $content = '<p>' . preg_replace('#(<br />[\r\n]+){2}#', '</p><p>', $content) . '</p>';

    $variables['body'] = \Drupal\Core\Render\Markup::create($content);
  }

  $protocol = ($_SERVER['HTTPS'] && ($_SERVER['HTTPS'] != "off")) ? "https" : "http";
  $variables['full_path'] = $protocol . "://" . $_SERVER['HTTP_HOST'] . str_replace('//', '/', '/' . base_path());
  $variables['base_path'] = str_replace('//', '/', '/' . base_path());
  $variables['year'] = date('Y');
}

/**
 * HOOK_paragraph_gallery
 * Rewrites child fields into parent for display purpose
 *
 * @param $variables
 */
function yqb_preprocess_paragraph__gallery(&$variables) {
  $i = 0;
  $slides = [];
  while (isset($variables['content']['field_gallery_image'][$i])) {
    $item = $variables['content']['field_gallery_image'][$i];
    if (isset($item['#paragraph'])) {
      $path = $item['#paragraph']->get('field_image')->entity->getFileUri();
      $text = $item['#paragraph']->field_text->value;

      $slides[] = array(
        'image' => file_create_url($path),
        'thumbnail' => ImageStyle::load('thumbnail_240xauto_')->buildUrl($path),
        'text' => (isset($text) && !empty($text)) ? $text : '',
      );
    }
    $i++;
  }

  $variables['slides'] = $slides;
}

function yqb_preprocess_views_view_field(&$variables) {
  /** @var Drupal\views\Plugin\views\field\EntityField $field */
  $field = $variables['field'];

  /** @var Drupal\views\ViewExecutable $view */
  $view = $variables['view'];

  /** @var Drupal\views\ResultRow $row */
  $row = $variables['row'];

  if ($row->_entity->getEntityTypeId() == 'node') {
    /** @var Drupal\node\Entity\Node $entity */
    $node = $row->_entity;

    if ($view->id() == 'arrivals' || $view->id() == 'departures') {
      $scheduled = FALSE;
      $estimated = FALSE;

      if ($node->bundle() == 'departure') {
        /** @var Drupal\datetime\Plugin\Field\FieldType\DateTimeFieldItemList $scheduled */
        $scheduled = $node->get('field_std')->value;

        /** @var Drupal\datetime\Plugin\Field\FieldType\DateTimeFieldItemList $estimated */
        $estimated = $node->get('field_etd')->value;
      }
      elseif ($node->bundle() == 'arrival') {
        /** @var Drupal\datetime\Plugin\Field\FieldType\DateTimeFieldItemList $scheduled */
        $scheduled = $node->get('field_sta')->value;

        /** @var Drupal\datetime\Plugin\Field\FieldType\DateTimeFieldItemList $estimated */
        $estimated = $node->get('field_eta')->value;
      }

      if ($scheduled && $estimated) {
        $scheduled = strtotime($scheduled);
        $estimated = strtotime($estimated);

        if ($estimated > $scheduled && $estimated >= strtotime('+1 day 00:00:00', $scheduled)) {
          switch ($field->field) {
            case 'field_std':
            case 'field_sta':
              $variables['output'] = [
                [
                  '#theme' => 'time',
                  '#timestamp' => $scheduled,
                  '#text' => date('H:i', $scheduled),
                ],
                [
                  '#markup' => ' <span class="late-24">(' . date('Y-m-d', $scheduled) . ')</span>',
                ],
              ];
              break;
            case 'field_etd':
            case 'field_eta':
              $variables['output'] = [
                [
                  '#theme' => 'time',
                  '#timestamp' => $estimated,
                  '#text' => date('H:i', $estimated),
                ],
                [
                  '#markup' => ' <span class="late-24">(' . date('Y-m-d', $estimated) . ')</span>',
                ],
              ];
              break;
          }
        }
      }
    }
  }
}
