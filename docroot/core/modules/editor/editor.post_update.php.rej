***************
*** 19,21 ****
  /**
   * @} End of "addtogroup updates-8.2.x".
   */
--- 21,132 ----
  /**
   * @} End of "addtogroup updates-8.2.x".
   */
+ 
+ /**
+  * @addtogroup updates-8.3.x
+  * @{
+  */
+ 
+ /**
+  * Recalculates file usages.
+  */
+ function editor_post_update_recalculate_file_usage(&$sandbox) {
+   $entity_load_limit = 50;
+ 
+   if (!\Drupal::moduleHandler()->moduleExists('file')) {
+     return;
+   }
+ 
+   if (!isset($sandbox['current'])) {
+     $result = \Drupal::entityQuery('file')->count()->execute();
+     if (empty($result)) {
+       return;
+     }
+     $sandbox['data']['total_file'] = $result;
+     $sandbox['data']['current_file_id'] = 0;
+     $sandbox['data']['count_file_id'] = 0;
+ 
+     foreach (\Drupal::entityTypeManager()->getDefinitions() as $entity_type) {
+       if ($entity_type->isSubclassOf(FieldableEntityInterface::class)) {
+         $entity_type_id = $entity_type->id();
+         $query = \Drupal::entityQuery($entity_type_id);
+         if ($entity_type->isRevisionable()) {
+           $query->allRevisions();
+         }
+         $result = $query->count()->execute();
+         if (!empty($result)) {
+           // We need result keys because they are either revision IDs (in case
+           // of revisionable entities) or entity IDs (in other case).
+           $sandbox['data']['total_entity_id'][$entity_type_id] = $result;
+           $sandbox['data']['current_entity_id'][$entity_type_id] = 0;
+           $sandbox['data']['count_entity_id'][$entity_type_id] = 0;
+         }
+       }
+     }
+ 
+     $sandbox['current'] = 0;
+     $sandbox['max'] = $sandbox['data']['total_file'] + array_sum($sandbox['data']['total_entity_id']);
+   }
+ 
+   if (!empty($sandbox['data']['total_file'])) {
+     // Step 1: delete existing file usages.
+     /** @var \Drupal\file\FileUsage\FileUsageInterface $file_usage */
+     $file_usage = \Drupal::service('file.usage');
+ 
+     $file_ids = \Drupal::entityQuery('file')
+       ->condition('fid', $sandbox['current_file_id'], '>')
+       ->sort('fid', 'ASC')
+       ->pager($entity_load_limit)
+       ->execute();
+     $files = $files = \Drupal::entityTypeManager()
+       ->getStorage('file')
+       ->loadMultiple($file_ids);
+     foreach ($files as $file) {
+       $usages = $file_usage->listUsage($file);
+       if (!empty($usages['editor'])) {
+         $file_usage->delete($file, 'editor', NULL, NULL, 0);
+       }
+     }
+ 
+     $sandbox['data']['count_file_id'] += count($file_ids);
+   }
+   else {
+     // Step 2: recalculate file usages.
+     reset($sandbox['data']['last_entity_id']);
+     $entity_type_id = key($sandbox['data']['last_entity_id']);
+ 
+     $entity_type = \Drupal::entityTypeManager()->getDefinition($entity_type_id);
+     $ids = \Drupal::entityQuery($entity_type_id)
+       ->condition($entity_type->getKey('id'), $sandbox['data']['last_entity_id'][$entity_type_id], '>')
+       ->pager($entity_load_limit)
+       ->sort($entity_type->getKey('id'), 'ASC')
+       ->execute();
+     if ($entity_type->isRevisionable()) {
+       foreach ($ids as $revision_id) {
+         $entity = \Drupal::entityTypeManager()
+           ->getStorage($entity_type_id)
+           ->loadRevision($revision_id);
+         editor_entity_insert($entity);
+       }
+     }
+     else {
+       $entities = \Drupal::entityTypeManager()
+         ->getStorage($entity_type_id)
+         ->loadMultiple($ids);
+       foreach ($entities as $entity) {
+         editor_entity_insert($entity);
+       }
+     }
+     if (empty($ids)) {
+       unset($sandbox['data']['last_entity_id'][$entity_type_id]);
+     }
+     else {
+       $sandbox['data']['count_entity_id'][$entity_type_id] += count($ids);
+       $sandbox['data']['last_entity_id'][$entity_type_id] = end($ids);
+     }
+   }
+ 
+   $current_amount = count($sandbox['data']['count_file_id']) + array_sum($sandbox['data']['count_entity_id']);
+   $sandbox['current'] = $sandbox['max'] - $current_amount;
+   $sandbox['#finished'] = empty($current_amount) ? 1 : ($sandbox['current'] / $sandbox['max']);
+ }
