***************
*** 23,29 ****
     *
     * @var array
     */
-   public static $modules = array('editor', 'editor_test', 'node', 'file');
  
    protected function setUp() {
      parent::setUp();
--- 24,37 ----
     *
     * @var array
     */
+   public static $modules = array('editor', 'editor_test', 'node', 'file', 'language');
+ 
+   /**
+    * Languages to enable.
+    *
+    * @var array
+    */
+   protected $langcodes = array('fr', 'en');
  
    protected function setUp() {
      parent::setUp();
***************
*** 70,75 ****
        2 => 'core/misc/help.png',
      );
  
      $image_entities = array();
      foreach ($image_paths as $key => $image_path) {
        $image = File::create();
--- 84,92 ----
        2 => 'core/misc/help.png',
      );
  
+     /** @var \Drupal\file\FileUsage\FileUsageInterface $file_usage */
+     $file_usage = $this->container->get('file.usage');
+ 
      $image_entities = array();
      foreach ($image_paths as $key => $image_path) {
        $image = File::create();
***************
*** 77,83 ****
        $image->setFilename(drupal_basename($image->getFileUri()));
        $image->save();
  
-       $file_usage = $this->container->get('file.usage');
        $this->assertIdentical(array(), $file_usage->listUsage($image), 'The image ' . $image_paths[$key] . ' has zero usages.');
  
        $image_entities[] = $image;
--- 94,99 ----
        $image->setFilename(drupal_basename($image->getFileUri()));
        $image->save();
  
        $this->assertIdentical(array(), $file_usage->listUsage($image), 'The image ' . $image_paths[$key] . ' has zero usages.');
  
        $image_entities[] = $image;
***************
*** 256,266 ****
        $this->assertIdentical(array('editor' => array('node' => array(1 => '2'))), $file_usage->listUsage($image_entity), 'The image ' . $image_paths[$key] . ' has 2 usages.');
      }
  
      // Test editor_entity_delete().
      $node->delete();
      foreach ($image_entities as $key => $image_entity) {
        $this->assertIdentical(array(), $file_usage->listUsage($image_entity), 'The image ' . $image_paths[$key] . ' has zero usages again.');
      }
    }
  
  }
--- 273,340 ----
        $this->assertIdentical(array('editor' => array('node' => array(1 => '2'))), $file_usage->listUsage($image_entity), 'The image ' . $image_paths[$key] . ' has 2 usages.');
      }
  
+     // Test editor_entity_translation_insert(): increment, by adding a new
+     // translation.
+     $translation = $node->addTranslation('fr', ['title' => 'test fr', 'body' => $original_values]);
+     $translation->save();
+     foreach ($image_entities as $key => $image_entity) {
+       $this->assertIdentical(array('editor' => array('node' => array(1 => '3'))), $file_usage->listUsage($image_entity), 'The image ' . $image_paths[$key] . ' has 3 usages.');
+     }
+ 
+     // Test editor_entity_translation_delete(): decrement, by deleting a
+     // translation.
+     $node->removeTranslation('fr');
+     $node->save();
+     foreach ($image_entities as $key => $image_entity) {
+       $this->assertIdentical(array('editor' => array('node' => array(1 => '2'))), $file_usage->listUsage($image_entity), 'The image ' . $image_paths[$key] . ' has 2 usages.');
+     }
+ 
      // Test editor_entity_delete().
      $node->delete();
      foreach ($image_entities as $key => $image_entity) {
        $this->assertIdentical(array(), $file_usage->listUsage($image_entity), 'The image ' . $image_paths[$key] . ' has zero usages again.');
      }
+ 
+     // Prepare a new node having only one file entity referenced in the body
+     // field.
+     $image_entity_1 = $image_entities[0];
+     $body_value = '<img src="awesome-llama-0.jpg" data-entity-type="file" data-entity-uuid="' . $image_entity_1->uuid() . '" />';
+     $node = Node::create([
+       'language' => 'en',
+       'type' => 'page',
+       'title' => 'test',
+       'body' => [
+         0 => [
+           'value' => $body_value,
+           'format' => 'filtered_html',
+         ]
+       ],
+       'uid' => 1,
+     ]);
+     $node->save();
+     $nid = $node->id();
+     $this->assertIdentical(array('editor' => array('node' => array($nid => '1'))), $file_usage->listUsage($image_entity_1), 'The image ' . $image_entity_1->getFileUri() . ' has 1 usage.');
+ 
+     // Add a translation.
+     $translation = $node->addTranslation('fr', [
+       'title' => 'test fr',
+       'body' => $node->get('body')->getValue(),
+     ]);
+     $node->save();
+     $this->assertIdentical(array('editor' => array('node' => array($nid => '2'))), $file_usage->listUsage($image_entity_1), 'The image ' . $image_entity_1->getFileUri() . ' has 2 usages.');
+ 
+     // Replace image in the French translation.
+     $image_entity_2 = $image_entities[1];
+     $translation->get('body')->value = '<img src="awesome-llama-1.jpg" data-entity-type="file" data-entity-uuid="' . $image_entity_2->uuid() . '" />';;
+     $node->save();
+     $this->assertIdentical(array('editor' => array('node' => array($nid => '1'))), $file_usage->listUsage($image_entity_1), 'The image ' . $image_entity_1->getFileUri() . ' has 1 usage.');
+     $this->assertIdentical(array('editor' => array('node' => array($nid => '1'))), $file_usage->listUsage($image_entity_2), 'The image ' . $image_entity_2->getFileUri() . ' has 1 usage.');
+ 
+     // Re-save translation with no image and check if usage changed
+     $translation->get('body')->value = '';
+     $node->save();
+     $this->assertIdentical(array('editor' => array('node' => array($nid => '1'))), $file_usage->listUsage($image_entity_1), 'The image ' . $image_entity_1->getFileUri() . ' has 1 usage.');
+     $this->assertIdentical(array(), $file_usage->listUsage($image_entity_2), 'The image ' . $image_entity_2->getFileUri() . ' has zero usages.');
    }
  
  }
