***************
*** 9,35 ****
   * Tests the DiffArray helper class.
   *
   * @group Common
   */
  class DiffArrayTest extends UnitTestCase {
  
    /**
-    * Array to use for testing.
-    *
-    * @var array
     */
-   protected $array1;
- 
-   /**
-    * Array to use for testing.
-    *
-    * @var array
-    */
-   protected $array2;
- 
-   protected function setUp() {
-     parent::setUp();
- 
-     $this->array1 = array(
        'same' => 'yes',
        'different' => 'no',
        'array_empty_diff' => array(),
--- 9,23 ----
   * Tests the DiffArray helper class.
   *
   * @group Common
+  * @coversDefaultClass \Drupal\Component\Utility\DiffArray
   */
  class DiffArrayTest extends UnitTestCase {
  
    /**
+    * @covers  ::diffAssocRecursive
     */
+   public function testDiffAssocRecursive() {
+     $array1 = array(
        'same' => 'yes',
        'different' => 'no',
        'array_empty_diff' => array(),
***************
*** 40,46 ****
        'string_compared_to_array' => 'value',
        'new' => 'new',
      );
-     $this->array2 = array(
        'same' => 'yes',
        'different' => 'yes',
        'array_empty_diff' => array(),
--- 28,34 ----
        'string_compared_to_array' => 'value',
        'new' => 'new',
      );
+     $array2 = array(
        'same' => 'yes',
        'different' => 'yes',
        'array_empty_diff' => array(),
***************
*** 50,61 ****
        'array_compared_to_string' => 'value',
        'string_compared_to_array' => array('value'),
      );
-   }
  
-   /**
-    * Tests DiffArray::diffAssocRecursive().
-    */
-   public function testDiffAssocRecursive() {
      $expected = array(
        'different' => 'no',
        'int_diff' => 1,
--- 38,44 ----
        'array_compared_to_string' => 'value',
        'string_compared_to_array' => array('value'),
      );
  
      $expected = array(
        'different' => 'no',
        'int_diff' => 1,
***************
*** 66,72 ****
        'new' => 'new',
      );
  
-     $this->assertSame(DiffArray::diffAssocRecursive($this->array1, $this->array2), $expected);
    }
  
  }
--- 49,99 ----
        'new' => 'new',
      );
  
+     $this->assertSame(DiffArray::diffAssocRecursive($array1, $array2), $expected);
+   }
+ 
+   /**
+    * @covers ::diffOnce
+    * @dataProvider providerTestDiffOnce
+    */
+   public function testDiffOnce($array1, $array2, $expected) {
+     $this->assertSame($expected, DiffArray::diffOnce($array1, $array2));
+   }
+ 
+   /**
+    * Provides test data for testDiffOnce().
+    */
+   public function providerTestDiffOnce() {
+     $object1 = new \stdClass();
+     $object2 = new \stdClass();
+     $data = [
+       [
+         [1, 1, 1, 1, 1],
+         [1, 1, 1],
+         [3 => 1, 4 => 1],
+       ],
+       [
+         [1, 1, 2, 2, 3, 3, 4],
+         ['4', 3, 2, 1],
+         [1 => 1, 3 => 2, 5 => 3, 6 => 4],
+       ],
+       [
+         [' ', '', 0, FALSE],
+         [0, 0, 0, 0, 'not used'],
+         [0 => ' ', 1 => '', 3 => FALSE],
+       ],
+       [
+         [$this, [], $object1, $object1, $object2],
+         [$object1, $object2, [], $this],
+         [3 => $object1],
+       ],
+       [
+         [['x' => ['y' => 'z']], [$object1]],
+         [1, 2, 3, '4', TRUE, [$object2], ['x' => ['y' => 'z']]],
+         [1 => [$object1]],
+       ],
+     ];
+     return $data;
    }
  
  }
